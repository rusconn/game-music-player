---
import PlayingBars from "./music-tabulizer/playing-bars.astro";
import LoadingCircle from "./music-tabulizer/loading-circle.astro";
---

<music-tabulizer>
  <ul>
    <template>
      <li>
        <div class="indicator">
          <PlayingBars class="playing-bars" />
          <LoadingCircle class="loading-circle" />
        </div>
        <button type="button" class="play-button">
          <div class="title"></div>
          <div class="duration"></div>
        </button>
        <button type="button" class="remove-button">
          <svg class="remove-icon">
            <use href="/icons.svg#iconamoon--trash-duotone"></use>
          </svg>
        </button>
      </li>
    </template>
  </ul>
</music-tabulizer>

<script>
  import { Music } from "../models/music";
  import { formatSec } from "../utils/format";
  import { queryMusicPlayer } from "../utils/query";
  import type { MusicPlayerElement } from "./music-player.astro.0.mts";
  import type { PlaiyingBarsElement } from "./music-tabulizer/playing-bars.astro.0.mts";
  import type { LoadingCircleElement } from "./music-tabulizer/loading-circle.astro.0.mts";

  export class MusicTabulizerElement extends HTMLElement {
    #musicPlayer!: MusicPlayerElement;

    #ul!: HTMLUListElement;
    #liTemplate!: HTMLTemplateElement;

    #playingMusic: Music | undefined;

    connectedCallback() {
      this.#musicPlayer = queryMusicPlayer();

      this.#ul = this.querySelector("ul")!;
      this.#liTemplate = this.querySelector("template")!;
    }

    async add(files: FileList) {
      const willMaybeLiFragments = [...files].map(async (file) => {
        const music = await Music.tryFrom(file);

        // TODO: make some announcement
        if (!music) return;

        const liFragment = this.#liTemplate.content.cloneNode(true) as DocumentFragment;
        const li = liFragment.firstElementChild!;
        const [indicator, button, removeButton] = li.children;
        const [title, duration] = button.children;

        button.addEventListener("click", async () => {
          this.#ul.setAttribute("inert", "");

          if (this.#playingMusic) {
            this.#queryRow(this.#playingMusic)
              ?.querySelector<PlaiyingBarsElement>(".playing-bars")
              ?.hide();
          }

          const playingBars = indicator.querySelector<PlaiyingBarsElement>(".playing-bars")!;
          const loadingCircle = indicator.querySelector<LoadingCircleElement>(".loading-circle")!;

          try {
            playingBars.hide(), loadingCircle.show();
            await this.#musicPlayer.play(music);
            loadingCircle.hide(), playingBars.play();
            this.#playingMusic = music;
          } catch {
            loadingCircle.hide();
            // TODO: avoid blocking
            alert("Sorry, failed to load the music file.\nTry another browser.");
          } finally {
            this.#ul.removeAttribute("inert");
          }
        });

        const { format, common } = music.metadata;

        title.textContent = common.title?.trim() || music.file.name;

        if (format.duration) {
          duration.textContent = formatSec(format.duration);
        }

        removeButton.addEventListener("click", () => {
          this.#queryRow(music)?.remove();
          music.removeInfo();
        });

        liFragment.firstElementChild!.setAttribute("data-id", music.id);

        return liFragment;
      });

      const maybeLiFragments = await Promise.all(willMaybeLiFragments);
      const liFragments = maybeLiFragments.filter((mtrf) => !!mtrf);

      this.#ul.prepend(...liFragments);
    }

    togglePlay() {
      if (this.#playingMusic) {
        this.#queryRow(this.#playingMusic)
          ?.querySelector<PlaiyingBarsElement>(".playing-bars")
          ?.pause();
      }
    }

    #queryRow(music: Music) {
      return this.querySelector(`li[data-id=${music.id}]`);
    }
  }

  if (!customElements.get("music-tabulizer")) {
    customElements.define("music-tabulizer", MusicTabulizerElement);
  }
</script>

<style>
  music-tabulizer {
    padding-inline: 1.375rem;

    ul {
      list-style-type: none;

      li {
        position: relative;
        display: flex;
        block-size: 1.75rem;

        .indicator {
          position: absolute;
          left: -1.375rem;
          block-size: 1.5rem;
          aspect-ratio: 1;
        }

        .play-button {
          inline-size: 100%;
          display: flex;
          align-items: center;
          cursor: pointer;
          padding-inline: 0.375rem;
          border-radius: 0.375rem;
          border: none;

          &:hover {
            background-color: #292929;
            filter: brightness(1.25);

            .duration {
              visibility: hidden;
              opacity: 0;
            }
          }

          .title {
            inline-size: 85%;
            text-align: start;
            white-space: nowrap;
            overflow-inline: hidden;
            text-overflow: ellipsis;
          }

          .duration {
            inline-size: 15%;
            visibility: visible;
            opacity: 1;
            color: #9c9c9c;
            text-align: end;
          }
        }

        .play-button:hover + .remove-button {
          visibility: visible;
        }

        .remove-button {
          position: absolute;
          visibility: hidden;
          display: flex;
          align-items: center;
          right: 0.75rem;
          z-index: 10;
          block-size: 100%;
          border: none;
          filter: brightness(1.2);
          cursor: pointer;

          &:hover {
            color: chocolate;
          }

          svg {
            block-size: 1.125rem;
            aspect-ratio: 1;
          }
        }
      }
    }
  }
</style>
