<music-uploader>
  <input type="file" accept="audio/*" multiple hidden />
  <button type="button">
    <svg>
      <use href="/icons.svg#fa6-solid--plus"></use>
    </svg>
  </button>
</music-uploader>

<script>
  import { queryMusicTabulizer } from "../utils/query";
  import type { MusicTabulizerElement } from "./music-tabulizer.astro.0.mts";

  class MusicUploaderElement extends HTMLElement {
    #musicTabulizer!: MusicTabulizerElement;

    #musicInput!: HTMLInputElement;
    #musicUpload!: HTMLButtonElement;

    connectedCallback() {
      this.#musicTabulizer = queryMusicTabulizer();

      this.#musicInput = this.querySelector("input")!;
      this.#musicUpload = this.querySelector("button")!;

      this.#musicInput.addEventListener("change", async (e) => {
        const input = e.target as HTMLInputElement;

        if (input.files) {
          await this.#musicTabulizer.add(input.files);

          // clear selection
          input.value = "";
        }
      });

      this.#musicUpload.addEventListener("click", () => {
        this.#musicInput.click();
      });
    }
  }

  if (!customElements.get("music-uploader")) {
    customElements.define("music-uploader", MusicUploaderElement);
  }
</script>

<style>
  music-uploader {
    display: flex;
    justify-content: center;

    button {
      display: inline-flex;
      padding: 0.35rem;
      block-size: 1.75rem;
      border-radius: 100vmax;
      border: none;
      color: inherit;
      cursor: pointer;
      background-color: #3a3a3a;

      &:hover {
        filter: brightness(1.2);
      }

      svg {
        fill: currentColor;
        inline-size: 100%;
        block-size: 100%;
      }
    }
  }
  :global(.mobile) music-uploader {
    button {
      background-color: #282828;
    }
  }
</style>
