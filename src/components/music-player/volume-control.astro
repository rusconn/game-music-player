---
import type { ComponentProps } from "astro/types";

import ControlContainer from "./control-primitives/container.astro";
import ControlButton from "./control-primitives/button.astro";
import ControlIcon from "./control-primitives/icon.astro";
import ControlBar from "./control-primitives/bar.astro";

type Props = Omit<ComponentProps<typeof ControlContainer>, "is">;

const { props } = Astro;
---

<ControlContainer is="volume-control" {...props}>
  <ControlButton class="mute-button" disabled>
    <ControlIcon class="volume-icon" iconId="clarity--volume-up-solid" />
    <ControlIcon class="muted-icon" iconId="clarity--volume-mute-solid" hidden />
  </ControlButton>
  <ControlBar class="volume-bar" min="0" max="1" step="0.05" value="1" disabled />
  <span class="volume-text">x1.00</span>
</ControlContainer>

<script>
  import type { Music } from "../../models/music";
  import { queryMusicPlayer } from "../../utils/query";
  import type { MusicPlayerElement } from "../music-player.astro.0.mts";
  import type { ControlBarElement } from "./control-primitives/bar.astro.0.mts";
  import type { ControlButtonElement } from "./control-primitives/button.astro.0.mts";
  import type { ControlIconElement } from "./control-primitives/icon.astro.0.mts";

  export class VolumeControlElement extends HTMLDivElement {
    #musicPlayer!: MusicPlayerElement;

    #muteButton!: ControlButtonElement;
    #volumeIcon!: ControlIconElement;
    #mutedIcon!: ControlIconElement;
    #volumeBar!: ControlBarElement;
    #volumeText!: HTMLSpanElement;

    #enabled = false;

    connectedCallback() {
      this.#musicPlayer = queryMusicPlayer();

      this.#muteButton = this.querySelector(".mute-button")!;
      this.#volumeIcon = this.#muteButton.querySelector(".volume-icon")!;
      this.#mutedIcon = this.#muteButton.querySelector(".muted-icon")!;
      this.#volumeBar = this.querySelector(".volume-bar")!;
      this.#volumeText = this.querySelector(".volume-text")!;

      this.#muteButton.addEventListener("click", () => {
        this.#musicPlayer.toggleMute();
        this.#volumeIcon.toggle();
        this.#mutedIcon.toggle();
      });

      this.#volumeBar.addEventListener("input", (e) => {
        const input = e.target as HTMLInputElement;
        const value = Number(input.value);
        this.#musicPlayer.volume = value;
        this.#volumeText.textContent = `x${value.toFixed(2)}`;
      });

      document.addEventListener("keydown", this.#handleMuteKeyDown);
      document.addEventListener("keydown", this.#handleVolumeKeyDown);
    }

    disconnectedCallback() {
      document.removeEventListener("keydown", this.#handleMuteKeyDown);
      document.removeEventListener("keydown", this.#handleVolumeKeyDown);
    }

    #handleMuteKeyDown = (e: KeyboardEvent) => {
      if (e.key === "m") {
        this.#muteButton.click();
      }
    };

    #handleVolumeKeyDown = (e: KeyboardEvent) => {
      if (!e.metaKey) return;

      const oldValue = Number(this.#volumeBar.value);

      let newValue;
      if (e.key === "ArrowDown") {
        e.preventDefault();
        if (this.#enabled) {
          newValue = Math.max(0, oldValue - 0.05);
        }
      }
      if (e.key === "ArrowUp") {
        e.preventDefault();
        if (this.#enabled) {
          newValue = Math.min(1, oldValue + 0.05);
        }
      }

      if (newValue != null) {
        const fixedNewValue = newValue.toFixed(2);
        this.#musicPlayer.volume = Number(fixedNewValue);
        this.#volumeBar.value = fixedNewValue;
        this.#volumeText.textContent = `x${fixedNewValue}`;
      }
    };

    load({ settings }: Music) {
      const { volume } = settings;
      this.#muteButton.enable();
      this.#volumeBar.value = volume.toString();
      this.#volumeBar.enable();
      this.#volumeText.textContent = `x${volume.toFixed(2)}`;
      this.#enabled = true;
    }
  }

  customElements.define("volume-control", VolumeControlElement, { extends: "div" });
</script>
