---
import type { HTMLAttributes } from "astro/types";

import ControlButton from "./control-primitives/button.astro";
import ControlIcon from "./control-primitives/icon.astro";
import ControlBar from "./control-primitives/bar.astro";

type Props = HTMLAttributes<"div">;

const { props } = Astro;
---

<tempo-control {...props}>
  <ControlButton class="tempo-button" disabled>
    <ControlIcon class="tempo-icon" iconId="mdi--metronome" />
  </ControlButton>
  <ControlBar class="tempo-bar" min="0.5" max="1.5" value="1" step="0.01" disabled />
  <span class="tempo-text">x1.00</span>
</tempo-control>

<script>
  import type { Music } from "../../models/music";
  import { queryMusicPlayer } from "../../utils/query";
  import type { MusicPlayerElement } from "../music-player.astro.0.mts";
  import type { ControlBarElement } from "./control-primitives/bar.astro.0.mts";
  import type { ControlButtonElement } from "./control-primitives/button.astro.0.mts";

  export class TempoControlElement extends HTMLElement {
    #musicPlayer!: MusicPlayerElement;

    #tempoButton!: ControlButtonElement;
    #tempoBar!: ControlBarElement;
    #tempoText!: HTMLSpanElement;

    #enabled = false;

    connectedCallback() {
      this.#musicPlayer = queryMusicPlayer();

      this.#tempoButton = this.querySelector(".tempo-button")!;
      this.#tempoBar = this.querySelector(".tempo-bar")!;
      this.#tempoText = this.querySelector(".tempo-text")!;

      this.#tempoButton.addEventListener("click", () => {
        this.#musicPlayer.tempo = 1.0;
        this.#tempoBar.value = "1";
        this.#tempoText.textContent = "x1.00";
      });

      this.#tempoBar.addEventListener("input", (e) => {
        const input = e.target as HTMLInputElement;
        const value = Number(input.value);
        this.#musicPlayer.tempo = value;
        this.#tempoText.textContent = `x${value.toFixed(2)}`;
      });

      document.addEventListener("keydown", this.#handleTempoKeyDown);
    }

    disconnectedCallback() {
      document.removeEventListener("keydown", this.#handleTempoKeyDown);
    }

    #handleTempoKeyDown = (e: KeyboardEvent) => {
      if (!e.shiftKey) return;

      const oldValue = Number(this.#tempoBar.value);

      let newValue;
      if (e.key === "ArrowDown") {
        e.preventDefault();
        if (this.#enabled) {
          newValue = Math.max(0.5, oldValue - 0.01);
        }
      }
      if (e.key === "ArrowUp") {
        e.preventDefault();
        if (this.#enabled) {
          newValue = Math.min(1.5, oldValue + 0.01);
        }
      }

      if (newValue != null) {
        const fixedNewValue = newValue.toFixed(2);
        this.#musicPlayer.tempo = Number(fixedNewValue);
        this.#tempoBar.value = fixedNewValue;
        this.#tempoText.textContent = `x${fixedNewValue}`;
      }
    };

    load({ settings }: Music) {
      this.#tempoButton.enable();
      this.#tempoBar.enable();
      const { tempo } = settings;
      this.#tempoBar.value = tempo.toString();
      this.#tempoText.textContent = `x${tempo.toFixed(2)}`;
      this.#enabled = true;
    }
  }

  if (!customElements.get("tempo-control")) {
    customElements.define("tempo-control", TempoControlElement);
  }
</script>

<style>
  tempo-control {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
</style>
