---
import type { HTMLAttributes } from "astro/types";

type Props = Omit<HTMLAttributes<"input">, "type">;

const { props } = Astro;
const { id, class: class_, ...rest } = props;
---

<control-bar {...{ id, class: class_ }}>
  <input type="range" {...rest} />
</control-bar>

<script>
  export class ControlBarElement extends HTMLElement {
    #input!: HTMLInputElement;

    connectedCallback() {
      this.#input = this.querySelector("input")!;
    }

    get value() {
      return this.#input.value;
    }

    get max() {
      return this.#input.max;
    }

    set value(value: HTMLInputElement["value"]) {
      this.#input.value = value;
    }

    set max(max: HTMLInputElement["max"]) {
      this.#input.max = max;
    }

    enable() {
      this.#input.removeAttribute("disabled");
    }

    disable() {
      this.#input.setAttribute("disabled", "");
    }
  }

  if (!customElements.get("control-bar")) {
    customElements.define("control-bar", ControlBarElement);
  }
</script>

<style>
  control-bar {
    display: flex;
    align-items: center;
    flex-grow: 1;

    & input {
      inline-size: 100%;
      cursor: pointer;

      &:disabled {
        cursor: not-allowed;
      }
    }
  }
</style>
