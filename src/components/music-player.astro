---
import TitleDisplay from "./music-player/title-display.astro";
import PlayControl from "./music-player/play-control.astro";
import VolumeControl from "./music-player/volume-control.astro";
import TempoControl from "./music-player/tempo-control.astro";
---

<music-player>
  <TitleDisplay class="title-display" />
  <PlayControl class="play-control" />
  <div class="volume-and-tempo">
    <VolumeControl class="volume-control" />
    <TempoControl class="tempo-control" />
  </div>
</music-player>

<script>
  import type { Music } from "../models/music";
  import { MusicPlayer } from "../models/music-player";
  import { queryMusicTabulizer } from "../utils/query";
  import type { TitleDisplayElement } from "./music-player/title-display.astro.0.mts";
  import type { PlayControlElement } from "./music-player/play-control.astro.0.mts";
  import type { VolumeControlElement } from "./music-player/volume-control.astro.0.mts";
  import type { TempoControlElement } from "./music-player/tempo-control.astro.0.mts";
  import type { MusicTabulizerElement } from "./music-tabulizer.astro.0.mts";

  export class MusicPlayerElement extends HTMLElement {
    #musicTabulizer!: MusicTabulizerElement;

    #titleDisplay!: TitleDisplayElement;
    #playControl!: PlayControlElement;
    #volumeControl!: VolumeControlElement;
    #tempoControl!: TempoControlElement;

    #musicPlayer = new MusicPlayer();
    #loadedMusic: Music | undefined;
    #updateDisplayRequestId = 0;

    connectedCallback() {
      this.#musicTabulizer = queryMusicTabulizer();

      this.#titleDisplay = this.querySelector(".title-display")!;
      this.#playControl = this.querySelector(".play-control")!;
      this.#volumeControl = this.querySelector(".volume-control")!;
      this.#tempoControl = this.querySelector(".tempo-control")!;
    }

    set volume(volume: number) {
      this.#musicPlayer.volume = volume;
      this.#loadedMusic?.updateSettings({ volume });
    }

    set tempo(tempo: number) {
      this.#musicPlayer.tempo = tempo;
      this.#loadedMusic?.updateSettings({ tempo });
    }

    async play(music: Music) {
      this.#stopUpdateDisplay();
      await this.#musicPlayer.play(music);
      this.#titleDisplay.load(music);
      this.#playControl.load(music);
      this.#volumeControl.load(music);
      this.#tempoControl.load(music);
      this.#loadedMusic = music;
      this.#startUpdateDisplay();
    }

    #stopUpdateDisplay() {
      cancelAnimationFrame(this.#updateDisplayRequestId);
    }

    #startUpdateDisplay() {
      this.#updateDisplayRequestId = requestAnimationFrame(this.#updateDisplay.bind(this));
    }

    #updateDisplay() {
      this.#playControl.update(this.#musicPlayer.currentTime ?? 0);
      this.#updateDisplayRequestId = requestAnimationFrame(this.#updateDisplay.bind(this));
    }

    async togglePlay() {
      await this.#musicPlayer.togglePlay();
      this.#musicTabulizer.togglePlay();
    }

    async seek(toSec: number) {
      await this.#musicPlayer.seek(toSec);
    }

    toggleMute() {
      this.#musicPlayer.toggleMute();
    }
  }

  if (!customElements.get("music-player")) {
    customElements.define("music-player", MusicPlayerElement);
  }
</script>

<style>
  music-player {
    display: flex;
    flex-direction: column;
    gap: 0.375rem;
  }

  .volume-and-tempo {
    display: flex;
    justify-content: space-between;
    gap: 1.125rem;
  }
</style>
