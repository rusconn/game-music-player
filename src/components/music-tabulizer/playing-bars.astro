---
import type { HTMLAttributes } from "astro/types";

type Props = HTMLAttributes<"div">;

const { props } = Astro;
---

<playing-bars {...props}>
  <span class="playing-bar hidden playing-bar-1"></span>
  <span class="playing-bar hidden playing-bar-2"></span>
  <span class="playing-bar hidden playing-bar-3"></span>
</playing-bars>

<script>
  export class PlaiyingBarsElement extends HTMLElement {
    #playingBars!: NodeListOf<HTMLSpanElement>;

    connectedCallback() {
      this.#playingBars = this.querySelectorAll("span");
    }

    play() {
      for (const bar of this.#playingBars) {
        bar.classList.remove("paused");
        this.#show();
      }
    }

    pause() {
      for (const bar of this.#playingBars) {
        bar.classList.toggle("paused");
      }
    }

    #show() {
      for (const bar of this.#playingBars) {
        bar.classList.remove("hidden");
      }
    }

    hide() {
      for (const bar of this.#playingBars) {
        bar.classList.add("hidden");
      }
    }
  }

  if (!customElements.get("playing-bars")) {
    customElements.define("playing-bars", PlaiyingBarsElement);
  }
</script>

<style>
  playing-bars {
    display: flex;
    align-items: flex-end;
    gap: 0.1rem;
    block-size: 1rem;
    padding-block-end: 0.1rem;
    position: absolute;
    inset-block-start: 0.375rem;
    inset-inline-start: 0.25rem;

    .playing-bar {
      display: inline-block;
      background-color: currentColor;
      inline-size: 0.25rem;
      block-size: 100%;
      animation: up-and-down 1.3s ease infinite alternate;

      &.paused {
        animation-play-state: paused;
      }

      &.hidden {
        display: none;
      }
    }

    .playing-bar-1 {
      block-size: 60%;
    }

    .playing-bar-2 {
      block-size: 30%;
      animation-delay: -2.4s;
    }

    .playing-bar-3 {
      block-size: 75%;
      animation-delay: -3.7s;
    }
  }

  @keyframes up-and-down {
    10% {
      block-size: 30%;
    }
    30% {
      block-size: 100%;
    }
    60% {
      block-size: 50%;
    }
    80% {
      block-size: 75%;
    }
    100% {
      block-size: 20%;
    }
  }
</style>
